{"ast":null,"code":"var _jsxFileName = \"/Users/gaurav/Desktop/gitprojects/incubyte-demo/src/views/App.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StringCalculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showResult: false,\n      sumValue: '',\n      textValue: \"//[**][%%]\\n1**2%%3\"\n    };\n  }\n  add() {\n    let sumValue = 0;\n    let textValue = this.state.textValue;\n    if (!textValue) {\n      sumValue = 0;\n    }\n    let delimiter = /[/n,;]+/;\n    if (textValue.startsWith(\"//\")) {\n      const match = textValue.match(/^\\/\\/(\\[.*?\\])(.*)$/);\n      if (match) {\n        // Extract all delimiters inside square brackets\n        let delimiters = [...match[1].matchAll(/\\[(.*?)\\]/g)].map(m => m[1]);\n\n        // Escape regex special characters in delimiters\n        let regexPattern = delimiters.map(d => d.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")).join(\"|\");\n        delimiter = new RegExp(regexPattern); // Create regex for all delimiters\n        textValue = match[2]; // Remove delimiter definition from textValue\n      }\n    }\n    // const match = textValue.match(/^\\/\\/(\\[.*?\\])(.*)$/);\n    // //const match = textValue.match(/^\\/\\/(\\[.*?\\])+\\n(.*)$/);\n    // if(match){\n    //     console.log(\"in if\")\n    //     textValue = match[2];\n\n    //     // let delimiters = [...match[1].matchAll(/\\[(.*?)\\]/g)].map(m => m[1]);\n    //     // let regexPattern = delimiters.map(d => d.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')).join('|');\n    //     // delimiter = new RegExp(regexPattern);\n\n    //     // let customDelimiter = match[1].slice(1, -1).replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    //     // delimiter = new RegExp(customDelimiter + \"|/\\n\");\n\n    //     const delimiterPart = match[1];\n    //     const delimiters = delimiterPart.match(/\\[(.*?)\\]/g).map(d => d.slice(1, -1));\n    //     delimiter = new RegExp(delimiters.map(d => d.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')).join('|'));\n    // }\n    console.log(textValue);\n    console.log(delimiter);\n    console.log(textValue.split(delimiter));\n    let numArray = textValue.split(delimiter).map(num => parseFloat(num) || 0);\n    const negatives = numArray.filter(num => num < 0);\n    if (negatives.length) {\n      alert(`Negative numbers not allowed: ${negatives.join(\", \")}`);\n      return;\n    }\n    numArray = numArray.filter(x => x < 1000);\n    sumValue = numArray.reduce((sum, num) => sum + num, 0);\n    this.setState({\n      sumValue,\n      showResult: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your string..\",\n          value: this.state.textValue,\n          onChange: e => this.setState({\n            textValue: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: this.add.bind(this),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), this.state.showResult ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sum is: \", this.state.sumValue]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default StringCalculator;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","StringCalculator","constructor","props","state","showResult","sumValue","textValue","add","delimiter","startsWith","match","delimiters","matchAll","map","m","regexPattern","d","replace","join","RegExp","console","log","split","numArray","num","parseFloat","negatives","filter","length","alert","x","reduce","sum","setState","render","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","bind"],"sources":["/Users/gaurav/Desktop/gitprojects/incubyte-demo/src/views/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n\nclass StringCalculator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            showResult:false,\n            sumValue: '',\n            textValue: \"//[**][%%]\\n1**2%%3\"\n        }\n    }\n\n    add(){\n        let sumValue = 0\n        let textValue = this.state.textValue\n        if(!textValue){\n            sumValue = 0\n        }\n        let delimiter = /[/n,;]+/\n        if (textValue.startsWith(\"//\")) {\n          const match = textValue.match(/^\\/\\/(\\[.*?\\])(.*)$/);\n          if (match) {\n            // Extract all delimiters inside square brackets\n            let delimiters = [...match[1].matchAll(/\\[(.*?)\\]/g)].map(m => m[1]);\n\n            // Escape regex special characters in delimiters\n            let regexPattern = delimiters\n              .map(d => d.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"))\n              .join(\"|\");\n\n            delimiter = new RegExp(regexPattern); // Create regex for all delimiters\n            textValue = match[2]; // Remove delimiter definition from textValue\n          }\n        }\n        // const match = textValue.match(/^\\/\\/(\\[.*?\\])(.*)$/);\n        // //const match = textValue.match(/^\\/\\/(\\[.*?\\])+\\n(.*)$/);\n        // if(match){\n        //     console.log(\"in if\")\n        //     textValue = match[2];\n\n        //     // let delimiters = [...match[1].matchAll(/\\[(.*?)\\]/g)].map(m => m[1]);\n        //     // let regexPattern = delimiters.map(d => d.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')).join('|');\n        //     // delimiter = new RegExp(regexPattern);\n\n        //     // let customDelimiter = match[1].slice(1, -1).replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        //     // delimiter = new RegExp(customDelimiter + \"|/\\n\");\n\n        //     const delimiterPart = match[1];\n        //     const delimiters = delimiterPart.match(/\\[(.*?)\\]/g).map(d => d.slice(1, -1));\n        //     delimiter = new RegExp(delimiters.map(d => d.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')).join('|'));\n        // }\n        console.log(textValue)\n        console.log(delimiter)\n        console.log(textValue.split(delimiter))\n        let numArray = textValue.split(delimiter).map(num => parseFloat(num) || 0);\n        const negatives = numArray.filter(num => num < 0);\n        if (negatives.length) {\n            alert(`Negative numbers not allowed: ${negatives.join(\", \")}`);\n            return;\n        }\n        numArray = numArray.filter((x) => x < 1000)\n        sumValue = numArray.reduce((sum, num) => sum + num, 0);\n        this.setState({sumValue, showResult: true})    \n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <input type=\"text\" placeholder=\"Type your string..\" value={this.state.textValue} onChange={(e)=> this.setState({textValue: e.target.value})} />\n                <button type=\"submit\" onClick={this.add.bind(this)}>Submit</button>\n                {\n                    this.state.showResult ? \n                    <p>Sum is: {this.state.sumValue}</p> : null\n                }\n            </header>\n        </div>\n      );\n    }\n}\n\nexport default StringCalculator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}