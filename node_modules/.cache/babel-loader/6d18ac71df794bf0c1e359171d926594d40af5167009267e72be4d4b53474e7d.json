{"ast":null,"code":"var _jsxFileName = \"/Users/gaurav/Desktop/gitprojects/incubyte-demo/src/views/App.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StringCalculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showResult: false,\n      // sumValue: '',\n      // textValue: \"\"\n      sumArr: []\n    };\n    this.add(\"\");\n    this.add(\"1\");\n    this.add(\"1,2\");\n    this.add(\"1,2,3,4,5\");\n    this.add(\"1\\n2,3\");\n    this.add(\"//;\\n1;2\");\n    this.add(\"1\\n2,-3,-4\");\n    this.add(\"1\\n2,1001,1002\");\n    this.add(\"//[***]\\n1***2***3\");\n    this.add(\"//[*][%]\\n1*2%3\");\n    this.add(\"//[**][%%]\\n1**2%%3\");\n  }\n  add(input) {\n    let sumArr = this.state.sumArr;\n    let sumValue = 0;\n    let textValue = input;\n    if (!textValue) {\n      sumValue = 0;\n    }\n    let delimiter = /,|\\n|;/;\n    const match = textValue.match(/^\\/\\/(\\[.*\\])[\\n](.*)/);\n    if (match) {\n      textValue = match[2];\n      const delimiterPart = match[1];\n      const delimiters = delimiterPart.match(/\\[(.*?)\\]/g).map(d => d.slice(1, -1));\n      delimiter = new RegExp(delimiters.map(d => d.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')).join('|'));\n    }\n    let numArray = textValue.split(delimiter).map(num => parseFloat(num) || 0);\n    const negatives = numArray.filter(num => num < 0);\n    if (negatives.length) {\n      alert(`Negative numbers not allowed: ${negatives.join(\", \")}`);\n      return;\n    }\n    numArray = numArray.filter(x => x < 1000);\n    sumValue = numArray.reduce((sum, num) => sum + num, 0);\n    sumArr.push({\n      input,\n      sum: sumValue\n    });\n    console.log(sumArr);\n    this.setState({\n      sumArr,\n      showResult: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: this.state.showResult ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sum is: \", this.state.sumValue[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default StringCalculator;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","StringCalculator","constructor","props","state","showResult","sumArr","add","input","sumValue","textValue","delimiter","match","delimiterPart","delimiters","map","d","slice","RegExp","replace","join","numArray","split","num","parseFloat","negatives","filter","length","alert","x","reduce","sum","push","console","log","setState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/gaurav/Desktop/gitprojects/incubyte-demo/src/views/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n\nclass StringCalculator extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            showResult:false,\n            // sumValue: '',\n            // textValue: \"\"\n            sumArr: []\n        }\n        this.add(\"\")\n        this.add(\"1\")\n        this.add(\"1,2\")\n        this.add(\"1,2,3,4,5\")\n        this.add(\"1\\n2,3\")\n        this.add(\"//;\\n1;2\")\n        this.add(\"1\\n2,-3,-4\")\n        this.add(\"1\\n2,1001,1002\")\n        this.add(\"//[***]\\n1***2***3\")\n        this.add(\"//[*][%]\\n1*2%3\")\n        this.add(\"//[**][%%]\\n1**2%%3\")\n    }\n\n    add(input){\n        let sumArr = this.state.sumArr\n        let sumValue = 0\n        let textValue = input\n        if(!textValue){\n            sumValue = 0\n        }\n        let delimiter = /,|\\n|;/;\n        const match = textValue.match(/^\\/\\/(\\[.*\\])[\\n](.*)/);\n        if(match){\n            textValue = match[2];\n\n            const delimiterPart = match[1];\n            const delimiters = delimiterPart.match(/\\[(.*?)\\]/g).map(d => d.slice(1, -1));\n            delimiter = new RegExp(delimiters.map(d => d.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')).join('|'));\n        }\n        let numArray = textValue.split(delimiter).map(num => parseFloat(num) || 0);\n        const negatives = numArray.filter(num => num < 0);\n        if (negatives.length) {\n            alert(`Negative numbers not allowed: ${negatives.join(\", \")}`);\n            return;\n        }\n        numArray = numArray.filter((x) => x < 1000)\n        sumValue = numArray.reduce((sum, num) => sum + num, 0);\n        sumArr.push({input, sum: sumValue})\n        console.log(sumArr)\n        this.setState({sumArr, showResult: true})    \n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {/*<input type=\"text\" placeholder=\"Type your string..\" value={this.state.textValue} onChange={(e)=> this.setState({textValue: e.target.value})} />\n                <button type=\"submit\" onClick={this.add.bind(this)}>Submit</button>*/}\n                {\n                    this.state.showResult ? \n                    <p>Sum is: {this.state.sumValue[0]}</p> \n                    : null\n                }\n            </header>\n        </div>\n      );\n    }\n}\n\nexport default StringCalculator;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,gBAAgB,SAASH,SAAS,CAAC;EACrCI,WAAWA,CAACC,KAAK,EAAC;IACd,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,UAAU,EAAC,KAAK;MAChB;MACA;MACAC,MAAM,EAAE;IACZ,CAAC;IACD,IAAI,CAACC,GAAG,CAAC,EAAE,CAAC;IACZ,IAAI,CAACA,GAAG,CAAC,GAAG,CAAC;IACb,IAAI,CAACA,GAAG,CAAC,KAAK,CAAC;IACf,IAAI,CAACA,GAAG,CAAC,WAAW,CAAC;IACrB,IAAI,CAACA,GAAG,CAAC,QAAQ,CAAC;IAClB,IAAI,CAACA,GAAG,CAAC,UAAU,CAAC;IACpB,IAAI,CAACA,GAAG,CAAC,YAAY,CAAC;IACtB,IAAI,CAACA,GAAG,CAAC,gBAAgB,CAAC;IAC1B,IAAI,CAACA,GAAG,CAAC,oBAAoB,CAAC;IAC9B,IAAI,CAACA,GAAG,CAAC,iBAAiB,CAAC;IAC3B,IAAI,CAACA,GAAG,CAAC,qBAAqB,CAAC;EACnC;EAEAA,GAAGA,CAACC,KAAK,EAAC;IACN,IAAIF,MAAM,GAAG,IAAI,CAACF,KAAK,CAACE,MAAM;IAC9B,IAAIG,QAAQ,GAAG,CAAC;IAChB,IAAIC,SAAS,GAAGF,KAAK;IACrB,IAAG,CAACE,SAAS,EAAC;MACVD,QAAQ,GAAG,CAAC;IAChB;IACA,IAAIE,SAAS,GAAG,QAAQ;IACxB,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK,CAAC,uBAAuB,CAAC;IACtD,IAAGA,KAAK,EAAC;MACLF,SAAS,GAAGE,KAAK,CAAC,CAAC,CAAC;MAEpB,MAAMC,aAAa,GAAGD,KAAK,CAAC,CAAC,CAAC;MAC9B,MAAME,UAAU,GAAGD,aAAa,CAACD,KAAK,CAAC,YAAY,CAAC,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC7EN,SAAS,GAAG,IAAIO,MAAM,CAACJ,UAAU,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACG,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxG;IACA,IAAIC,QAAQ,GAAGX,SAAS,CAACY,KAAK,CAACX,SAAS,CAAC,CAACI,GAAG,CAACQ,GAAG,IAAIC,UAAU,CAACD,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1E,MAAME,SAAS,GAAGJ,QAAQ,CAACK,MAAM,CAACH,GAAG,IAAIA,GAAG,GAAG,CAAC,CAAC;IACjD,IAAIE,SAAS,CAACE,MAAM,EAAE;MAClBC,KAAK,CAAC,iCAAiCH,SAAS,CAACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;MAC9D;IACJ;IACAC,QAAQ,GAAGA,QAAQ,CAACK,MAAM,CAAEG,CAAC,IAAKA,CAAC,GAAG,IAAI,CAAC;IAC3CpB,QAAQ,GAAGY,QAAQ,CAACS,MAAM,CAAC,CAACC,GAAG,EAAER,GAAG,KAAKQ,GAAG,GAAGR,GAAG,EAAE,CAAC,CAAC;IACtDjB,MAAM,CAAC0B,IAAI,CAAC;MAACxB,KAAK;MAAEuB,GAAG,EAAEtB;IAAQ,CAAC,CAAC;IACnCwB,OAAO,CAACC,GAAG,CAAC5B,MAAM,CAAC;IACnB,IAAI,CAAC6B,QAAQ,CAAC;MAAC7B,MAAM;MAAED,UAAU,EAAE;IAAI,CAAC,CAAC;EAC7C;EAEA+B,MAAMA,CAAA,EAAG;IACP,oBACEpC,OAAA;MAAKqC,SAAS,EAAC,KAAK;MAAAC,QAAA,eAChBtC,OAAA;QAAQqC,SAAS,EAAC,YAAY;QAAAC,QAAA,EAItB,IAAI,CAAClC,KAAK,CAACC,UAAU,gBACrBL,OAAA;UAAAsC,QAAA,GAAG,UAAQ,EAAC,IAAI,CAAClC,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;QAAA;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,GACrC;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEV;AACJ;AAEA,eAAezC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}